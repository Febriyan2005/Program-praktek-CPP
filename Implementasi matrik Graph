#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <climits>
#include <stack>

using namespace std;

// Define the graph using adjacency list representation
unordered_map<char, vector<pair<char, int>>> graph = {
    {'A', {{'B', 7}, {'C', 6}, {'D', 5}, {'E', 9}}},
    {'B', {{'F', 4}, {'G', 8}, {'H', 11}}},
    {'C', {{'F', 10}, {'G', 3}}},
    {'D', {{'G', 9}}},
    {'E', {{'G', 6}, {'H', 12}}},
    {'F', {{'I', 12}, {'J', 9}}},
    {'G', {{'I', 5}, {'J', 7}}},
    {'H', {{'J', 10}, {'K', 8}}},
    {'I', {{'L', 7}}},
    {'J', {{'L', 8}}},
    {'K', {{'L', 11}}},
    // Adding additional connections for nodes up to 'Z'
    {'L', {{'M', 2}, {'N', 3}}},
    {'M', {{'O', 4}, {'P', 5}}},
    {'N', {{'Q', 6}, {'R', 7}}},
    {'O', {{'S', 8}, {'T', 9}}},
    {'P', {{'U', 10}, {'V', 11}}},
    {'Q', {{'W', 12}, {'X', 13}}},
    {'R', {{'Y', 14}, {'Z', 15}}},
    {'S', {{'T', 1}, {'U', 2}}},
    {'T', {{'V', 3}, {'W', 4}}},
    {'U', {{'X', 5}, {'Y', 6}}},
    {'V', {{'Z', 7}}},
    {'W', {{'Z', 8}}},
    {'X', {{'Y', 9}, {'Z', 10}}},
    {'Y', {{'Z', 11}}},
};

void shortestPath(char start, char end) {
    unordered_map<char, int> distances;
    unordered_map<char, char> previous;
    for (auto &node : graph) {
        distances[node.first] = INT_MAX;
    }
    distances[start] = 0;

    auto cmp = [&distances](char left, char right) { return distances[left] > distances[right]; };
    priority_queue<char, vector<char>, decltype(cmp)> pq(cmp);
    pq.push(start);

    while (!pq.empty()) {
        char current = pq.top();
        pq.pop();

        if (current == end) break;

        for (auto &neighbor : graph[current]) {
            char next = neighbor.first;
            int weight = neighbor.second;
            int newDist = distances[current] + weight;
            if (newDist < distances[next]) {
                distances[next] = newDist;
                previous[next] = current;
                pq.push(next);
            }
        }
    }

    if (distances[end] == INT_MAX) {
        cout << "No path found from " << start << " to " << end << endl;
        return;
    }

    cout << "Shortest path from " << start << " to " << end << ": ";
    stack<char> path;
    for (char at = end; at != start; at = previous[at]) {
        path.push(at);
    }
    path.push(start);

    while (!path.empty()) {
        cout << path.top();
        path.pop();
        if (!path.empty()) cout << " -> ";
    }
    cout << "\nDistance: " << distances[end] << endl;
}

void longestPathUtil(char node, char end, unordered_map<char, bool> &visited, int currentDist, int &maxDist, vector<char> &currentPath, vector<char> &longestPath) {
    visited[node] = true;
    currentPath.push_back(node);

    if (node == end) {
        if (currentDist > maxDist) {
            maxDist = currentDist;
            longestPath = currentPath;
        }
    } else {
        for (auto &neighbor : graph[node]) {
            if (!visited[neighbor.first]) {
                longestPathUtil(neighbor.first, end, visited, currentDist + neighbor.second, maxDist, currentPath, longestPath);
            }
        }
    }

    currentPath.pop_back();
    visited[node] = false;
}

void longestPath(char start, char end) {
    unordered_map<char, bool> visited;
    for (auto &node : graph) {
        visited[node.first] = false;
    }

    int maxDist = INT_MIN;
    vector<char> currentPath;
    vector<char> longestPath;

    longestPathUtil(start, end, visited, 0, maxDist, currentPath, longestPath);

    if (maxDist == INT_MIN) {
        cout << "No path found from " << start << " to " << end << endl;
        return;
    }

    cout << "Longest path from " << start << " to " << end << ": ";
    for (char node : longestPath) {
        cout << node;
        if (node != end) cout << " -> ";
    }
    cout << "\nDistance: " << maxDist << endl;
}

int main() {
    int choice;
    char startNode = '\0', endNode = '\0';

    while (true) {
        cout << "Menu:\n";
        cout << "1. Input nodes\n";
        cout << "2. Find the shortest path\n";
        cout << "3. Find the longest path\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter start node: ";
                cin >> startNode;
                cout << "Enter end node: ";
                cin >> endNode;
                break;
            case 2:
                if (startNode != '\0' && endNode != '\0') {
                    cout << "Finding shortest path from " << startNode << " to " << endNode << "...\n";
                    shortestPath(startNode, endNode);
                } else {
                    cout << "Please input nodes first.\n";
                }
                break;
            case 3:
                if (startNode != '\0' && endNode != '\0') {
                    cout << "Finding longest path from " << startNode << " to " << endNode << "...\n";
                    longestPath(startNode, endNode);
                } else {
                    cout << "Please input nodes first.\n";
                }
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    }

    return 0;
}
