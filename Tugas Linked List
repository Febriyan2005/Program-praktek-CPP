#include <iostream>
#include <string>

// Struktur untuk simpul dalam Linked List
struct Node {
    int NIM;
    std::string name;
    Node* next;
};

// Fungsi untuk inisialisasi Linked List
void initialize(Node*& head) {
    head = nullptr;
}

// Fungsi untuk membuat simpul baru
Node* createNode(int NIM, std::string name) {
    Node* newNode = new Node();
    newNode->NIM = NIM;
    newNode->name = name;
    newNode->next = nullptr;
    return newNode;
}

// Fungsi untuk menambahkan simpul baru ke Linked List
void insertNode(Node*& head, int NIM, std::string name) {
    Node* newNode = createNode(NIM, name);
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Fungsi untuk menghapus simpul dari Linked List
void deleteNode(Node*& head, int NIM) {
    if (head == nullptr) return;
    if (head->NIM == NIM) {
        Node* temp = head;
        head = head->next;
        delete temp;
    } else {
        Node* temp = head;
        while (temp->next != nullptr && temp->next->NIM != NIM) {
            temp = temp->next;
        }
        if (temp->next != nullptr) {
            Node* toDelete = temp->next;
            temp->next = temp->next->next;
            delete toDelete;
        }
    }
}

// Fungsi untuk menampilkan Linked List
void displayList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        std::cout << "NIM: " << temp->NIM << ", Name: " << temp->name << std::endl;
        temp = temp->next;
    }
}

// Fungsi untuk menampilkan menu
void displayMenu() {
    std::cout << "Menu:" << std::endl;
    std::cout << "1. Inisialisasi Linked List" << std::endl;
    std::cout << "2. Membuat simpul baru" << std::endl;
    std::cout << "3. Menambahkan simpul baru ke Linked List" << std::endl;
    std::cout << "4. Menghapus simpul dari Linked List" << std::endl;
    std::cout << "5. Menampilkan Linked List" << std::endl;
    std::cout << "6. Keluar" << std::endl;
    std::cout << "Pilih opsi: ";
}

int main() {
    Node* head = nullptr;
    int choice, NIM;
    std::string name;

    do {
        displayMenu();
        std::cin >> choice;

        switch (choice) {
            case 1:
                initialize(head);
                std::cout << "Linked List telah diinisialisasi." << std::endl;
                break;
            case 2:
                std::cout << "Masukkan NIM: ";
                std::cin >> NIM;
                std::cout << "Masukkan Nama Lengkap: ";
                std::cin.ignore(); // Mengabaikan karakter newline yang tersisa di buffer input
                std::getline(std::cin, name);
                insertNode(head, NIM, name);
                std::cout << "Simpul baru telah dibuat." << std::endl;
                break;
            case 3:
                std::cout << "Masukkan NIM: ";
                std::cin >> NIM;
                std::cout << "Masukkan Nama Lengkap: ";
                std::cin.ignore(); // Mengabaikan karakter newline yang tersisa di buffer input
                std::getline(std::cin, name);
                insertNode(head, NIM, name);
                std::cout << "Simpul baru telah ditambahkan ke Linked List." << std::endl;
                break;
            case 4:
                std::cout << "Masukkan NIM dari simpul yang akan dihapus: ";
                std::cin >> NIM;
                deleteNode(head, NIM);
                std::cout << "Simpul dengan NIM " << NIM << " telah dihapus dari Linked List." << std::endl;
                break;
            case 5:
                std::cout << "Isi Linked List:" << std::endl;
                displayList(head);
                break;
            case 6:
                std::cout << "Keluar dari program." << std::endl;
                break;
            default:
                std::cout << "Opsi tidak valid. Silakan coba lagi." << std::endl;
        }
    } while (choice != 6);

    return 0;
}
